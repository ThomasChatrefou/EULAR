//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/BasicActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BasicActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BasicActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BasicActions"",
    ""maps"": [
        {
            ""name"": ""UserInteraction"",
            ""id"": ""342c7fd0-ec68-4917-969f-553289f2c37e"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""c16ff03c-e555-453c-b939-b08c62bf6111"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cursor"",
                    ""type"": ""Value"",
                    ""id"": ""c57801dc-30a1-4e5d-8bc9-f469817e17cb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c06c6cea-7a56-4001-9eca-ff403c4fc6d8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0191592b-6810-403a-a232-f63f63cda194"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4b4a083-5904-469d-9a1e-f7214081964f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e85840b-5f7a-4f30-9db6-ec89263f6df9"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""TouchScreen"",
            ""bindingGroup"": ""TouchScreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UserInteraction
        m_UserInteraction = asset.FindActionMap("UserInteraction", throwIfNotFound: true);
        m_UserInteraction_Click = m_UserInteraction.FindAction("Click", throwIfNotFound: true);
        m_UserInteraction_Cursor = m_UserInteraction.FindAction("Cursor", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UserInteraction
    private readonly InputActionMap m_UserInteraction;
    private IUserInteractionActions m_UserInteractionActionsCallbackInterface;
    private readonly InputAction m_UserInteraction_Click;
    private readonly InputAction m_UserInteraction_Cursor;
    public struct UserInteractionActions
    {
        private @BasicActions m_Wrapper;
        public UserInteractionActions(@BasicActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_UserInteraction_Click;
        public InputAction @Cursor => m_Wrapper.m_UserInteraction_Cursor;
        public InputActionMap Get() { return m_Wrapper.m_UserInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UserInteractionActions set) { return set.Get(); }
        public void SetCallbacks(IUserInteractionActions instance)
        {
            if (m_Wrapper.m_UserInteractionActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_UserInteractionActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_UserInteractionActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_UserInteractionActionsCallbackInterface.OnClick;
                @Cursor.started -= m_Wrapper.m_UserInteractionActionsCallbackInterface.OnCursor;
                @Cursor.performed -= m_Wrapper.m_UserInteractionActionsCallbackInterface.OnCursor;
                @Cursor.canceled -= m_Wrapper.m_UserInteractionActionsCallbackInterface.OnCursor;
            }
            m_Wrapper.m_UserInteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Cursor.started += instance.OnCursor;
                @Cursor.performed += instance.OnCursor;
                @Cursor.canceled += instance.OnCursor;
            }
        }
    }
    public UserInteractionActions @UserInteraction => new UserInteractionActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    private int m_TouchScreenSchemeIndex = -1;
    public InputControlScheme TouchScreenScheme
    {
        get
        {
            if (m_TouchScreenSchemeIndex == -1) m_TouchScreenSchemeIndex = asset.FindControlSchemeIndex("TouchScreen");
            return asset.controlSchemes[m_TouchScreenSchemeIndex];
        }
    }
    public interface IUserInteractionActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnCursor(InputAction.CallbackContext context);
    }
}
